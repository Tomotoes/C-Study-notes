在基类（父类）中用virtual修饰符声明一个虚方法，
然后在在派生类（子类）中用override修饰符覆盖基类虚方法。

表明是对基类的虚方法重载。这种优势在于它可以在程序运行时再决定调用哪一个方法，这就是所谓的“运行时多态”或者称动态绑定。

virtual关键字用于指定属性或方法在派生类中重写. 

默认情况下,派生类类从其基类继承属性和方法,如果继承的属性或方法需要在派生类中有不同的行为,则可以重写它,即可以在派生类中定义该属性或方法的新实现.

这时在基类中该属性或方法必须用virtual关键字修饰.virtual关键字用于指定属性或方法时可以在派生类中重写.具有virtual关键字的方法或属性被称作虚拟成员.

使用虚拟方法与重写方法时，需要注意下面几个方面：
    （1) 虚拟方法不能声明为静态（static）的。因为静态的方法是应用在类这一层次的，而面向对象的多态性只能在对象上运作，所以无法在类中使用。

    （2) virtual不能和private一起使用，因为声明为private就无法在扩充类中重写.
    
    （3) 重写方法的名称、参数个数、类型以及返回值都必须和虚拟方法中的一致


实例：

class A

{

public void G(){}

public virtual void F(){}

}



class B:A

{

new public void G(){}

public override void F(){}

} 

这是实现面向对象里面最主要得特征之一多态的重要途径，用它定义的方法是虚拟的方法，在继承自他的类重可用override来重写这个方法来实现多态的特征 

