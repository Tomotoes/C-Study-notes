来自本质论p650

高级主题：绕过封装和访问修饰符
     假设有相关的权限，我们可以通过反射机制来 绕过封装和访问修饰符。
     反射机制 提供了晚期绑定功能，它允许预览一个类型的成员，在对象的元数据中查找特定的构造的名称，并可调用类型的成员。
     
     反射是.NET 中的重要机制，
     通过反射，可以在运行时 获得程序或程序集中每一个类型（包括类，结构，委托，接口和枚举等）的成员和成员信息。
     有了反射，即可对每一个类型 了如指掌。
     另外 我还可以直接创建对象，即使这个对象的类型在编译时 还不知道
     
     另外 介绍一下 System.Type类
     System.Type 类 对于反射 起着核心的作用，但它 是一个抽象的基类
     Type有多种数据类型对应的派生类，我们使用这个派生类的对象的方法，字段，属性来查找 有关该类型的所有信息